<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Simulador Educativo de Circuito RC</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; display: flex; justify-content: center; align-items: center; flex-direction: column; background-color: #f0f2f5; margin: 0; padding: 20px; gap: 20px; }
        .main-container { display: flex; gap: 30px; align-items: flex-start; }
        .graphics-container { display: flex; flex-direction: column; gap: 15px; align-items: center; }
        canvas { border: 2px solid #333; background-color: #fff; }
        #controls-container { display: flex; flex-direction: column; gap: 15px; width: 340px; }
        .control-panel { background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        .control-group { margin-bottom: 15px; }
        label { font-weight: 600; display: block; margin-bottom: 5px; }
        input[type="range"] { width: 100%; }
        #info-box { background-color: #e9ecef; padding: 15px; font-family: 'Courier New', Courier, monospace; font-size: 0.9em; line-height: 1.5; white-space: pre-wrap; border-radius: 5px; }
        h1, h3 { margin: 0 0 15px 0; text-align: center;}
        hr { border: none; border-top: 1px solid #ccc; margin: 15px 0; }
        .canvas-title { font-weight: bold; font-size: 1.1em; margin-bottom: 5px; text-align: center; }
    </style>
</head>
<body>

    <h1>Simulador Educativo de Circuito RC</h1>
    <div class="main-container">
        <div class="graphics-container">
            <div class="canvas-title">Plano Complejo (Dominio Fasorial)</div>
            <canvas id="complex-plane" width="500" height="500"></canvas>
            <div class="canvas-title">Dominio del Tiempo (Ondas Senoidales)</div>
            <canvas id="time-domain" width="500" height="200"></canvas>
        </div>
        <div id="controls-container">
            <div class="control-panel">
                <h3>Esquema del Circuito</h3>
                <canvas id="circuit-diagram" width="300" height="150"></canvas>
            </div>
            <div class="control-panel">
                <h3>Tensión de Entrada (Vᵢₙ)</h3>
                <div class="control-group">
                    <label>Amplitud: <span id="vin-mag-val">10</span> V</label>
                    <input type="range" id="vin-mag" min="1" max="10" value="10" step="1">
                </div>
                <div class="control-group">
                    <label>Fase: <span id="vin-phase-val">0</span>°</label>
                    <input type="range" id="vin-phase" min="0" max="360" value="0" step="1">
                </div>
            </div>
             <div class="control-panel">
                <h3>Parámetros del Circuito RC</h3>
                <div class="control-group">
                    <label>Resistencia (R): <span id="r-val">100</span> Ω</label>
                    <input type="range" id="r-slider" min="10" max="1000" value="100" step="10">
                </div>
                <div class="control-group">
                    <label>Capacitancia (C): <span id="c-val">100</span> μF</label>
                    <input type="range" id="c-slider" min="10" max="1000" value="100" step="10">
                </div>
                 <div class="control-group">
                    <label>Frecuencia Angular (ω): <span id="omega-val">100</span> rad/s</label>
                    <input type="range" id="omega-slider" min="1" max="200" value="100" step="1">
                </div>
            </div>
            <div class="control-panel">
                <h3>Análisis del Circuito</h3>
                <div id="info-box"></div>
            </div>
        </div>
    </div>

    <script>
        class Complex {
            constructor(x, y) { this.x = x; this.y = y; }
            get A() { return Math.sqrt(this.x*this.x + this.y*this.y); }
            get angleRad() { return Math.atan2(this.y, this.x); }
            get angleDeg() { return this.angleRad * 180 / Math.PI; }
            
            static add(c1, c2) { return new Complex(c1.x + c2.x, c1.y + c2.y); }
            static multiply(c1, c2) { return new Complex(c1.x * c2.x - c1.y * c2.y, c1.x * c2.y + c1.y * c2.x); }
            static divide(c1, c2) {
                const denom = c2.x*c2.x + c2.y*c2.y;
                if (denom === 0) return new Complex(0, 0);
                return new Complex((c1.x * c2.x + c1.y * c2.y) / denom, (c1.y * c2.x - c1.x * c2.y) / denom);
            }
        }

        // --- Obtener todos los canvas y contextos ---
        const complexCanvas = document.getElementById('complex-plane'), ctxC = complexCanvas.getContext('2d');
        const timeCanvas = document.getElementById('time-domain'), ctxT = timeCanvas.getContext('2d');
        const circuitCanvas = document.getElementById('circuit-diagram'), ctxS = circuitCanvas.getContext('2d');

        const controls = {
            vin_A: { s: document.getElementById('vin-mag'), v: document.getElementById('vin-mag-val') },
            vin_P: { s: document.getElementById('vin-phase'), v: document.getElementById('vin-phase-val') },
            R: { s: document.getElementById('r-slider'), v: document.getElementById('r-val') },
            C: { s: document.getElementById('c-slider'), v: document.getElementById('c-val') },
            W: { s: document.getElementById('omega-slider'), v: document.getElementById('omega-val') },
        };
        const infoBoxEl = document.getElementById('info-box');
        
        const cWidth = complexCanvas.width, cHeight = complexCanvas.height;
        const cCenterX = cWidth / 2, cCenterY = cHeight / 2;
        const scale = 20;

        // --- DIBUJO DEL ESQUEMA DEL CIRCUITO ---
        function drawCircuitDiagram() {
            const w = circuitCanvas.width, h = circuitCanvas.height;
            const y_center = h / 2;
            const x_start = 20, x_end = w - 20;

            ctxS.clearRect(0, 0, w, h);
            ctxS.strokeStyle = '#000'; ctxS.fillStyle = '#000'; ctxS.lineWidth = 2; ctxS.font = 'bold 14px Arial';

            // --- Componentes ---
            // Fuente de Tensión
            ctxS.beginPath(); ctxS.arc(x_start + 25, y_center, 15, 0, 2 * Math.PI); ctxS.stroke();
            ctxS.fillText('~', x_start + 21, y_center + 5);
            ctxS.fillText('Vᵢₙ', x_start + 15, y_center - 25);

            // Resistencia
            const r_x = 100, r_w = 40, r_h = 10;
            ctxS.beginPath(); ctxS.moveTo(r_x, y_center);
            for(let i=0; i<6; i++) ctxS.lineTo(r_x + (i*r_w/6) + (i%2===0 ? -r_w/12 : r_w/12), y_center + (i%2===0 ? -r_h : r_h));
            ctxS.lineTo(r_x + r_w, y_center); ctxS.stroke();
            ctxS.fillText('R', r_x + r_w/2 - 5, y_center - 25);

            // Condensador
            const c_x = 180, c_gap = 8, c_len = 20;
            ctxS.beginPath(); ctxS.moveTo(c_x, y_center); ctxS.lineTo(c_x + 20, y_center);
            ctxS.moveTo(c_x + 20, y_center - c_len); ctxS.lineTo(c_x + 20, y_center + c_len);
            ctxS.moveTo(c_x + 20 + c_gap, y_center - c_len); ctxS.lineTo(c_x + 20 + c_gap, y_center + c_len);
            ctxS.moveTo(c_x + 20 + c_gap, y_center); ctxS.lineTo(c_x + 40, y_center); ctxS.stroke();
            ctxS.fillText('C', c_x + c_gap + 5, y_center - 25);
            
            // --- Cables de conexión ---
            ctxS.beginPath();
            ctxS.moveTo(x_start + 40, y_center); ctxS.lineTo(r_x, y_center);
            ctxS.moveTo(r_x + r_w, y_center); ctxS.lineTo(c_x, y_center);
            ctxS.moveTo(c_x + 40, y_center); ctxS.lineTo(x_end, y_center);
            ctxS.moveTo(x_end, y_center); ctxS.lineTo(x_end, h - 20); ctxS.lineTo(x_start, h - 20); ctxS.lineTo(x_start, y_center + 15);
            ctxS.moveTo(x_start, y_center-15); ctxS.lineTo(x_start, 20); ctxS.lineTo(x_end, 20); ctxS.lineTo(x_end, y_center);
            ctxS.stroke();

            // --- Indicador de Vout ---
            ctxS.strokeStyle = '#28a745'; ctxS.fillStyle = '#28a745'; ctxS.lineWidth = 1.5;
            const vout_x = c_x + 20 + c_gap/2;
            ctxS.fillText('Vₒᵤₜ', vout_x - 15, y_center + 45);
            ctxS.beginPath();
            ctxS.moveTo(vout_x, y_center + c_len); ctxS.lineTo(vout_x, y_center + 30);
            ctxS.moveTo(vout_x, y_center - c_len); ctxS.lineTo(vout_x, y_center - 30);
            ctxS.moveTo(vout_x - 4, y_center + 30); ctxS.lineTo(vout_x + 4, y_center + 30); // +
            ctxS.moveTo(vout_x-2, y_center+30-2); ctxS.lineTo(vout_x-2, y_center+30+2);
            ctxS.moveTo(vout_x - 4, y_center - 30); ctxS.lineTo(vout_x + 4, y_center - 30); // -
            ctxS.stroke();
        }


        function drawGrid(ctx, w, h, center_x, center_y, lblX, lblY) {
            ctx.clearRect(0, 0, w, h);
            ctx.strokeStyle = '#ddd'; ctx.lineWidth = 1;
            for (let i = scale; i < w / 2; i += scale) {
                ctx.beginPath(); ctx.moveTo(center_x + i, 0); ctx.lineTo(center_x + i, h); ctx.moveTo(center_x - i, 0); ctx.lineTo(center_x - i, h); ctx.stroke();
            }
            for (let i = scale; i < h / 2; i += scale) {
                ctx.beginPath(); ctx.moveTo(0, center_y + i); ctx.lineTo(w, center_y + i); ctx.moveTo(0, center_y - i); ctx.lineTo(w, center_y - i); ctx.stroke();
            }
            ctx.strokeStyle = '#333'; ctx.lineWidth = 2;
            ctx.beginPath(); ctx.moveTo(0, center_y); ctx.lineTo(w, center_y); ctx.stroke();
            ctx.moveTo(center_x, 0); ctx.lineTo(center_x, h); ctx.stroke();
            ctx.font = '14px Arial'; ctx.fillStyle = '#333';
            ctx.fillText(lblX, w - 25, center_y - 10);
            ctx.fillText(lblY, center_x + 10, 15);
        }

        function drawPhasor(phasor, color) {
            if (!phasor || phasor.A === 0) return;
            const endX = cCenterX + phasor.x * scale, endY = cCenterY - phasor.y * scale;
            ctxC.strokeStyle = color; ctxC.fillStyle = color; ctxC.lineWidth = 3;
            ctxC.beginPath(); ctxC.moveTo(cCenterX, cCenterY); ctxC.lineTo(endX, endY); ctxC.stroke();
            const headlen = 10, angle = Math.atan2(endY - cCenterY, endX - cCenterX);
            ctxC.beginPath(); ctxC.moveTo(endX, endY);
            ctxC.lineTo(endX - headlen * Math.cos(angle - Math.PI / 6), endY - headlen * Math.sin(angle - Math.PI / 6));
            ctxC.lineTo(endX - headlen * Math.cos(angle + Math.PI / 6), endY - headlen * Math.sin(angle + Math.PI / 6));
            ctxC.closePath(); ctxC.fill();
        }

        function drawTimeDomain(phasors) {
            const tW = timeCanvas.width, tH = timeCanvas.height, tCenterY = tH / 2;
            drawGrid(ctxT, tW, tH, 0, tCenterY, "t", "V");
            phasors.forEach(({ phasor, color }) => {
                if (!phasor) return;
                ctxT.strokeStyle = color; ctxT.lineWidth = 2;
                ctxT.beginPath();
                for (let px = 0; px < tW; px++) {
                    const t = (px / tW) * 2 * Math.PI;
                    const omega_t = t * (tW / (scale * 2));
                    const y = phasor.A * Math.cos(omega_t + phasor.angleRad);
                    const canvasY = tCenterY - y * (scale / 2);
                    if (px === 0) ctxT.moveTo(px, canvasY); else ctxT.lineTo(px, canvasY);
                }
                ctxT.stroke();
            });
        }

        function updateSimulation() {
            Object.values(controls).forEach(c => c.v.textContent = c.s.value);
            const vin_A = parseFloat(controls.vin_A.s.value);
            const vin_P_deg = parseFloat(controls.vin_P.s.value);
            const R = parseFloat(controls.R.s.value);
            const C = parseFloat(controls.C.s.value) * 1e-6;
            const omega = parseFloat(controls.W.s.value);
            const vin_P_rad = vin_P_deg * Math.PI / 180;
            const Vin = new Complex(vin_A * Math.cos(vin_P_rad), vin_A * Math.sin(vin_P_rad));
            const Zr = new Complex(R, 0);
            const Zc = new Complex(0, -1 / (omega * C));
            const Ztotal = Complex.add(Zr, Zc);
            const H = Complex.divide(Zc, Ztotal);
            const Vout = Complex.multiply(Vin, H);
            drawGrid(ctxC, cWidth, cHeight, cCenterX, cCenterY, "Re", "Im");
            drawPhasor(Vin, '#007bff');
            drawPhasor(Vout, '#28a745');
            drawTimeDomain([{ phasor: Vin, color: '#007bff' }, { phasor: Vout, color: '#28a745' }]);
            updateInfoBox({ R, C, omega }, { Zr, Zc, Ztotal }, H, Vout);
        }

        function updateInfoBox(params, Z, H, Vout) {
            let info = `<strong>Parámetros:</strong>\n R=${params.R}Ω, C=${(params.C * 1e6).toFixed(0)}μF, ω=${params.omega}rad/s\n\n`;
            info += `<strong>Impedancias (Z):</strong>\n Zᵣ = ${Z.Zr.x.toFixed(1)} Ω\n`;
            info += ` Z꜀ = j(${Z.Zc.y.toFixed(1)}) Ω\n`;
            info += ` Zₜₒₜ = ${Z.Ztotal.x.toFixed(1)} + j(${Z.Ztotal.y.toFixed(1)}) Ω\n\n`;
            info += `<strong>Función Transferencia (H):</strong>\n`;
            info += ` |H| = ${H.A.toFixed(3)} (Atenuación)\n`;
            info += ` ∠H = ${H.angleDeg.toFixed(2)}° (Desfase)\n\n`;
            info += `<strong>Tensión de Salida (Vₒᵤₜ):</strong>\n`;
            info += ` Vₒᵤₜ = ${Vout.A.toFixed(2)}V ∠ ${Vout.angleDeg.toFixed(2)}°`;
            infoBoxEl.innerHTML = info;
        }

        Object.values(controls).forEach(c => c.s.addEventListener('input', updateSimulation));
        
        // --- DIBUJO INICIAL ---
        drawCircuitDiagram();
        updateSimulation();
    </script>
</body>
</html>
